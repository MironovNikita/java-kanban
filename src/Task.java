public class Task {
    static int uniqId = 1;

    private int id;
    private String status = TaskStatus.NEW.toString();
    protected String name;
    protected String description;

    /*По конструктору: по сути создание объекта на перспективе будет за пользователем. А по факту, пользователь
    может вносить лишь те данные, которые относятся к имени и описанию любой задачи. Поэтому в конструктор передаю
    только эти 2 параметра (name, description). А само создание задачи без имени/описания, думаю, нет смысла делать.
    По идее можно было бы создавать задачу без описания. Но, как правило, подобные программы используются организациями,
    чтобы распланировать порядок выполнения проекта. И в описании как раз указываются те, кто и как должен выполнить ту
    или иную задачу. Поэтому остановил свой выбор именно на таких параметрах, которые передаются в конструктор.
    Доступа к ID у пользователя быть не должно, как я считаю, т.к. данный параметр уникален (по ID можно только
    искать, но не задавать его напрямую, иначе может быть 2 одинаковых ID, если пользователь вдруг сможет задать
    его вручную). Ну а статус, соответственно, у любой задачи на момент её создания должен быть NEW. По этой причине
    его задавать пользователь тоже не должен.*/
    public Task(String name, String description) {
        this.name = name;
        this.description = description;
        id = uniqId;
        uniqId++;
    }

    public String getInfo() {
        return id + ")" + " " + name + " " + "(" + description + ")" + " " + status;
    }

    public String getStatus() {
        return status;
    }

    public Integer getId() {
        return id;
    }

    public void setStatus(String status) {
        if (status.equals(TaskStatus.DONE.toString())
                || status.equals(TaskStatus.NEW.toString())
                || status.equals(TaskStatus.IN_PROGRESS.toString())) {
            this.status = status;
        }
    }

    //Переопределение toString() для проверки, что выводится именно та задача/эпик/подзадача по id
    /* Я закомментировал этот метод, потому что в начале ТЗ сразу после картинки идёт такой текст:
    "Пользователь не будет видеть консоль вашего приложения. Поэтому нужно сделать так, чтобы методы не просто
    печатали что-то в консоль, но и возвращали объекты нужных типов. Вы можете добавить консольный вывод для
    самопроверки в класcе Main, но на работу методов он влиять не должен".
    Его я добавил как раз в качестве проверки, чтобы было видно, что и как возвращается (не ссылку, а именно текст).*/
    @Override
    public String toString() {
        return id + ")" + " " + name + " " + "(" + description + ")" + " " + status;
    }
}
